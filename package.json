{
  "name": "sodium",
  "version": "1.0.9",
  "author": {
    "name": "Pedro Paixao",
    "email": "paixaop@gmail.com"
  },
  "license": "MIT",
  "description": "Lib Sodium port for node.js",
  "dependencies": {
    "should": ">=2.1.0"
  },
  "devDependencies": {
    "mocha": ">=0.14.1"
  },
  "scripts": {
    "preinstall": "make sodium"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/paixaop/node-sodium"
  },
  "keywords": [
    "encryption",
    "ed25519",
    "curve25519",
    "NaCl",
    "libsodium",
    "crypto",
    "unique",
    "stamp"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "# node-sodium\n\n\nPort of the [lib sodium](https://github.com/jedisct1/libsodium) Encryption Library to Node.js.\n\nThis a work in progress but most of Lib Sodium as been ported already.\nMissing are the `generichash` functions, and the alternative primitives, like `crypto_box_curve25519xsalsa20poly1305`, or `crypto_stream_aes128ctr`\n\nThere's a \"low level\" native module that gives you access directly to Lib Sodium, and a friendlier high level API that makes the use of the library a bit easier.\n\nCheck [`docs/ported-functions.md`](https://github.com/paixaop/node-sodium/tree/master/docs/ported-functions.md) for a list of all lib sodium functions included in node-sodium.\n\n# Usage\n\nJust a quick example that uses the same public/secret key pair to encrypt and then decrypt the message.\n\n    var sodium = require('sodium');        \n    var box = new sodium.Box();     // random key pair, and nonce generated automatically\n    \n    var cipherText = box.encrypt(\"This is a secret message\", \"utf8\");\n    var plainText = box.decrypt(cipherText);\n    \n    \n# Low Level API\nA low level API is provided for advanced users. The functions available through the low level API have the exact same names as in lib sodium, and are available via the `sodium.api` object. Here is one example of how to use some of the low level API functions to encrypt/decrypt a message:\n\n    var sodium = require('sodium').api;\n    \n    // Generate keys\n    var sender = sodium.crypto_box_keypair();\n    var receiver = sodium.crypto_box_keypair();\n    \n\t// Generate random nonce\n    var nonce = new Buffer(sodium.crypto_box_NONCEBYTES);\n\tsodium.randombytes_buf(nonce);\n    \n    // Encrypt\n    var plainText = new Buffer('this is a message');\n    var cipherMsg = sodium.crypto_box(plainText, nonce, receiver.publicKey, sender.secretKey);\n\n    // Decrypt\n    var plainBuffer = sodium.crypto_box_open(cipherMsg,nonce,sender.publicKey, receiver.secretKey);\n\n    // We should get the same plainText!\n    // We should get the same plainText!\n    if( plainBuffer.toString() == plainText) {\n        console.log(\"Message decrypted correctly\");\n    }\n    \nAs you can see the high level API implementation is easier to use, but the low level API will fill just right for those with experience with the C version of lib sodium. It also allows you to bypass any bugs in the high level APIs.\n\nYou can find this code sample in `examples\\low-level-api.js`.\n    \n# Documentation\nPlease read the work in progress documentation found under [`docs/`](https://github.com/paixaop/node-sodium/tree/master/docs).\n\nYou shoudld also review the unit tests as most of the high level API is \"documented\" there.\nDon't forget to check out the examples as well.\n\n# Lib Sodium Documentation\nLib Sodium is somewhat documented [here](http://mob5.host.cs.st-andrews.ac.uk/html/). Node-Sodium follows the same structure and I will keep documenting it as fast as possible. \n\n# Install\n\nTested on Mac and Linux\n\n    npm install sodium\n    \nnode-sodium depends on lib sodium, so if lib sodium does not compile on your platform chances are `npm install sodium` will fail.\n\n# Manual Install\nClone this git repository, and change to the local directory where you ran git clone to, \n\n    npm install\n\nThis will pull lib sodium from github and compile it by running the following commands\n\n    cd libsodium\n    ./autogen\n    ./configure\n    make\n    \nFollowed by\n\n    cd ..\n    npm build .\n    npm install\n    \nIf you get an `autogen.sh` error similar to this\n    \n    ./autogen.sh: line 13: libtoolize: command not found\n    \nYou'll need to install libtool and automake in your platform. For Mac OSX you can use [Homebrew](http://brew.sh)\n\n    brew install libtool automake    \n\nThen repeat the steps from `./autogen.sh`\n    \n\n# Code Samples\nPlease check the fully documented code samples in `test/test_sodium.js`.\n\n# Installing Mocha Test Suite\n\nTo run the unit tests you need Mocha. If you'd like to run coverage reports you need mocha-istanbul. You can install both globally by doing\n\n    npm install -g mocha mocha-istanbul\n\nYou may need to run it with `sudo` is only root user has access to Node.js global directories\n\n    sudo npm install -g mocha mocha-istanbul\n\n# Unit Tests\nYou need to have mocha test suite installed globally then you can run the node-sodium unit tests by\n\n    make test\n    \n# Coverage Reports\nYou need to have mocha test suite installed globally then you can run the node-sodium unit tests by\n\t\n    make test-cov\n\t\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/paixaop/node-sodium/issues"
  },
  "_id": "sodium@1.0.9",
  "_from": "sodium@1.0.9"
}
